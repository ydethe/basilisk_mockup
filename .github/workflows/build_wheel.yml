name: "Build wheel"

on:
  push:
    # # Pattern matched against refs/tags
    # tags:
    #   - '*'           # Push events to every tag not containing /

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build-linux:
    name: Build Linux
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.7","3.8","3.9","3.10","3.11"]
        os: [ubuntu-20.04]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: nschloe/action-checkout-with-lfs-cache@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      # - name: Cache conan packages
      #   id: cache-conan
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-conan-packages
      #   with:
      #     # conan cache files are stored in `~/.conan` on Linux/macOS
      #     path: ~/.conan
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
      #     restore-keys: |
      #       ${{ runner.os }}-build-${{ env.cache-name }}-
      # - name: Cache pip modules
      #   id: cache-pip
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-pip-modules
      #   with:
      #     path: ~/.cache/pip
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      - name: "Install linux packages"
        run: sudo apt-get update && sudo apt-get install build-essential swig cmake python3-tk python3.9-venv -y
      - name: "Create virtual Environment"
        run: python${{ matrix.python-version }} -m venv .venv
      - name: "Install python packages"
        run: source .venv/bin/activate && pip3 install wheel conan==1.59.0 pytest datashader holoviews pytest-xdist setuptools
      - name: "Build basilisk"
        run: |
          source .venv/bin/activate
          python3 --version
          # python3 conanfile.py
          python3 build_wheel.py
          echo "WHL_NAME=$(python3 build_wheel.py -n)" >> $GITHUB_ENV
      - name: "Upload python wheel"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WHL_NAME }}
          path: ${{ env.WHL_NAME }}

  build-windows:
    name: Build Windows
    runs-on: windows-2019
    strategy:
      matrix:
        python-version: ["3.9"]
    permissions:
      actions: read
      contents: read
      security-events: write
    env:
      MPLBACKEND: agg
    steps:
      - name: Checkout code
        uses: nschloe/action-checkout-with-lfs-cache@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: '**/bskPkgRequired.txt'
      # - name: Choco help
      #   uses: crazy-max/ghaction-chocolatey@v2
      #   with:
      #     args: -h
      # - name: "Install swig and cmake"
      #   shell: pwsh
      #   run: choco install swig cmake -y
      - name: "Create python virtual env"
        shell: pwsh
        run: python -m venv venv
      - name: "Install wheel and conan package"
        shell: pwsh
        run: |
            venv\Scripts\activate.ps1
            pip install wheel conan==1.59.0 parse six pytest-xdist setuptools
      - name: "Add basilisk and cmake path to env path"
        shell: pwsh
        run: |
          $oldpath = (Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH).path
          $newpath = “$oldpath;${{ env.GITHUB_WORKSPACE }}\dist3\Basilisk;C:\Program Files\CMake\bin”
          Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\Environment' -Name PATH -Value $newPath
      - name: "Build basilisk"
        shell: pwsh
        run: |
          venv\Scripts\activate.ps1
          python3 --version
          # python conanfile.py
          python build_wheel.py
          Import-Module "$env:ChocolateyInstall/helpers/chocolateyInstaller.psm1"
          refreshenv
          python build_wheel.py -n > temp.txt
          $env:WHL_NAME += (Get-Content temp.txt)
      - name: "Upload python wheel"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.WHL_NAME }}
          path: ${{ env.WHL_NAME }}
